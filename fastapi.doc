from fastapi import FastAPI, Response, status, HTTPException
from fastapi.params import Body
from pydantic import BaseModel
from typing import Optional
from random import randrange
import psycopg2

app = FastAPI()

class Pym_Post(BaseModel):
    title : str
    content : str
    published : bool = True
    rating : Optional[int] = None 
    
try:
    conn = psycopg2.connection(host='localhost', database='fastapi', user='postgres', password='postgres');   
    
my_posts = [{"Title": "Engineering", "Content": "IT", "id": 1}, {"Title": "Medical", "Content": "MBBS", "id": 2}]

def find_post(id):
    for p in my_posts:
        if p["id"] == id:
            return p

def find_idx_post(id):
    for i, p in enumerate(my_posts):
        if p['id'] == id:
            return i

@app.get("/")
async def root():
    return {"message": "Hello"}

@app.get("/posts")
def get_posts():
    return {"data": my_posts}


#----------------Extracting and sending back the post but manually--------------
# @app.post("/createposts")
# def create_posts(body_data: dict = Body()):
#     print(body_data)
#     #return {"message": "Successfully created post."}
#     return {"new_post":f"title: {body_data['title']}, content: {body_data['content']}"}


#----------------Extracting and sending back the post through pydantic--------------
# @app.post("/posts")
# def create_posts(new_body_data: Pym_Post):
#     print(new_body_data)
#     print(new_body_data.dict())
#     return {"data": new_body_data}
    #return {"pym_data"}

#----------------Saving array ost in pydantic--------------------------
@app.post("/posts", status_code=status.HTTP_201_CREATED)
def create_posts(post: Pym_Post):
    post_dict = post.dict()
    post_dict['id'] = randrange(0, 10000) 
    my_posts.append(post_dict)
    return {"data": post_dict}

#----------------Retrieve one post----------------------
# @app.get("/posts/{id}")
# def get_post(id):
#     print(id)
#     return {"post detail":f"This is the post of id {id}"}

#----------------Retrieve one post in valid way----------------------
@app.get("/posts/{id}")
def get_post(id:int):
    post = find_post(id)
    if not post:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND,
                            detail = f"Post with id {id} was not found")
    
    # if not post_find : response.status_code = status.HTTP_404_NOT_FOUND
    # return {'message': f"Post with id {id} was not found"}
    return {"post detail": post}

@app.delete("/posts/{id}", status_code = status.HTTP_204_NO_CONTENT)
def delete_post(id:int):
    #delete post->find idx in arr that has req id->my_posts.pop(index)
    index = find_idx_post(id)
    
    if index == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail = f"Post with id : {id} does not exist....")
    
    my_posts.pop(index)
    return Response(status_code = status.HTTP_204_NO_CONTENT)

@app.put("/posts/{id}")
def update_post(id: int, post: Pym_Post):
    index = find_idx_post(id)

    if index == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail = f"Post with id : {id} does not exist....")
    
    post_dict = post.dict()
    post_dict['id'] = id
    my_posts[index] = post_dict
    return {'data': post_dict}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RAW QUERIES

from fastapi import FastAPI, Response, status, HTTPException, Depends
from fastapi.params import Body
from pydantic import BaseModel
from typing import Optional
from random import randrange
import psycopg2
from psycopg2.extras import RealDictCursor
import time
from . import models
from .database import engine, get_db
from sqlalchemy.orm import Session

models.Base.metadata.create_all(bind=engine)

app = FastAPI()

class Post(BaseModel):
    title : str
    content : str
    published : bool = True
    rating : Optional[int] = None 

#Database Connection
while True:
    try:
        conn = psycopg2.connect(host='localhost', database='fastapi', user='postgres', password='postgres', cursor_factory=RealDictCursor);   
        cursor = conn.cursor()
        print("Database connection was succesfull")
        break
    except Exception as error:
        print("Connecting to database failed")
        print("Error: ", error)
        time.sleep(2)
    
my_posts = [{"Title": "Engineering", "Content": "IT", "id": 1}, {"Title": "Medical", "Content": "MBBS", "id": 2}]

def find_post(id):
    for p in my_posts:
        if p["id"] == id:
            return p

def find_idx_post(id):
    for i, p in enumerate(my_posts):
        if p['id'] == id:
            return i

@app.get("/")
async def root():
    return {"message": "Hello"}

@app.get("/sqlalchemy")
def test_posts(db: Session = Depends(get_db)):
    posts = db.query(models.Post).all()
    return {"data": posts}

@app.get("/posts")
def get_posts():
    cursor.execute("""SELECT * FROM posts""")
    posts = cursor.fetchall()
    return {"data": posts}

#----------------Saving array post in pydantic--------------------------
@app.post("/posts", status_code=status.HTTP_201_CREATED)
def create_posts(post: Post):
    cursor.execute("""INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING * """,(post.title,post.content, post.published))
    
    new_post = cursor.fetchone()
    conn.commit()
    return {"data": new_post}

#----------------Retrieve one post in valid way----------------------
@app.get("/posts/{id}")
def get_post(id:int):
    cursor.execute("""SELECT * FROM posts WHERE id = %s""", (str(id)))
    post = cursor.fetchone()
    if not post:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND,
                            detail = f"Post with id {id} was not found")
    return {"post detail": post}

#-------------------Delete Posts--------------------
@app.delete("/posts/{id}", status_code = status.HTTP_204_NO_CONTENT)
def delete_post(id:int):
    #delete post->find idx in arr that has req id->my_posts.pop(index)
    
    cursor.execute("""DELETE FROM posts WHERE id = %s RETURNING *""", (str(id)))
    deleted_post = cursor.fetchone()
    conn.commit()
    
    if deleted_post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail = f"Post with id : {id} does not exist....")
    
    return Response(status_code = status.HTTP_204_NO_CONTENT)

@app.put("/posts/{id}")
def update_post(id: int, post: Post):
    cursor.execute("""UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s RETURNING *""",(post.title, post.content, post.published, str(id)))
    
    updated_post = cursor.fetchone()
    conn.commit()
    
    if updated_post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail = f"Post with id : {id} does not exist....")
    
    return {'data': updated_post}

